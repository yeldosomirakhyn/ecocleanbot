import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import asyncio

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–æ–∫
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token="7039707379:AAECiESCcebjwMbonkYQjceCCjRjpGSwl4g")
# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –±–æ—Ç–∞ –∏ loop
dp = Dispatcher(bot)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
name = ""
phone_number = ""
birthday = ""

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
    await message.answer("EcoCleanBot - —É–¥–æ–±–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É–±–æ—Ä–∫—É –∏ —Ö–∏–º—á–∏—Å—Ç–∫—É. \n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éüëá",
                         reply_markup=ReplyKeyboardMarkup(
                             keyboard=[
                                 [KeyboardButton(text="–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")]
                             ],
                             resize_keyboard=True,
                             selective=True  # –î–æ–±–∞–≤–∏–º –∞—Ç—Ä–∏–±—É—Ç selective=True
                         ))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
@dp.message_handler(lambda message: message.text == "–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
async def register_start(message: types.Message):
    # –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—èüëá",
                         reply_markup=ReplyKeyboardRemove())  # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–º–µ–Ω–∏
@dp.message_handler(lambda message: name == "")
async def register_name(message: types.Message):
    global name
    name = message.text
    # –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await message.answer("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü—Ä–∏–º–µ—Ä: +77007801799",
                         reply_markup=ReplyKeyboardRemove())  # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message_handler(lambda message: phone_number == "")
async def register_phone(message: types.Message):
    global phone_number
    phone_number = message.text
    # –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì. –ù–∞–ø—Ä–∏–º–µ—Ä, 01.01.2000",
                         reply_markup=ReplyKeyboardRemove())  # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
@dp.message_handler(lambda message: birthday == "")
async def register_birthday(message: types.Message):
    global birthday
    birthday = message.text
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é" / "–ò–∑–º–µ–Ω–∏—Ç—å"
    user_info = f"–í–∞—à–µ –∏–º—è: {name}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthday}"
    await message.answer(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n{user_info}",
                         reply_markup=ReplyKeyboardMarkup(
                             keyboard=[
                                 [KeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é")],
                                 [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å")]
                             ],
                             resize_keyboard=True,
                             selective=True  # –î–æ–±–∞–≤–∏–º –∞—Ç—Ä–∏–±—É—Ç selective=True
                         ))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é" / "–ò–∑–º–µ–Ω–∏—Ç—å"
@dp.message_handler(lambda message: message.text in ["–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", "–ò–∑–º–µ–Ω–∏—Ç—å"])
async def register_confirmation(message: types.Message):
    if message.text == "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é":
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        global name, phone_number, birthday
        name = ""
        phone_number = ""
        birthday = ""
        await message.answer("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ!")
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
        await message.answer("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éüëá",
                             reply_markup=ReplyKeyboardMarkup(
                                 keyboard=[
                                     [KeyboardButton(text="–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")]
                                 ],
                                 resize_keyboard=True,
                                 selective=True  # –î–æ–±–∞–≤–∏–º –∞—Ç—Ä–∏–±—É—Ç selective=True
                             ))

async def main():
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling()

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ main-—Ü–∏–∫–ª–∞
    asyncio.run(main())
